=head1 NAME

Promised::Command - Run a command

=head1 SYNOPSIS

  use Promised::Command;
  
  $cmd = Promised::Command->new (['ls', '-a', '/']);
  $cmd->run->then (sub {
    return $cmd->wait;
  })->then (sub {
    my $result = $_[0];
    if ($result->exit_code == 0) {
      warn "done";
    } else {
      warn "failed";
    }
  });

=head1 DESCRIPTION

The C<Promised::Command> class provides a L<Promise>-returning command
execution interface.

=head1 METHODS

Following methods are available:

=over 4

=item $cmd = Promised::Command->new ($args)

Create a new command object.  The argument must be an array reference
containing a command (zeroth item) and zero or more arguments (first
or later items).

=item $promise = $cmd->run

Start the execution of the command.  It returns a L<Promise>, which is
resolved with a result object when the execution is started.

This method cannot be invoked multiple times.

=item $promise = $cmd->wait

Return a L<Promise>, which is resolved with a result object once the
execution of the command has finished.

This method can be invoked before the C<run>'s promise is resolved,
but it must be invoked after the C<run> method is invoked.  This
method always returns the same promise.

The promise is resolved with a result object whose C<is_success>
method returns true even when the exit code of the command is
non-zero.  Note also that failure to execute the command
(e.g. command-not-found error) is also result in resolving the promise
with a successful result object whose exit code is non-zero.

=item $boolean = $cmd->create_process_group

=item $cmd->create_process_group ($boolean)

Get or set whether a new process group should be created for the
command (by C<setpgrp>) or not.

This method must be invoked before the C<run> method is invoked.  If
this method is not invoked, the same process group as the main process
is used.

=item $cmd->wd ($string)

=item $string = $cwd->wd

Get or set the current working directory for the command as a
(system-dependent byte) string.

This method must be invoked before the C<run> method is invoked.  If
this method is not invoked, the current directory is left unchanged
(i.e. same as that of the main process).

=item $hashref = $cmd->envs

Return the environment variables for the command as a reference to the
hash of environment name/value byte string pairs.

If a value is specified in the hash, an environment variable is set.
Otherwise, if an C<undef> value is explicitly specified in the hash,
the environment variable, if any, is unset.  Otherwise, any
environment variable of the main process is left unchanged.  This
method must be invoked before the C<run> method is invoked.

=item $cmd->stdin (SCALARREF)

Specify the standard input as a scalar reference to the byte string.

This method must be invoked before the C<run> method is invoked.  If
this method is not invoked, the standard input is left unchanged
(i.e. same as the standard input of the main process).

=item $cmd->stdout (SCALARREF)

=item $cmd->stdout (CODE)

=item $cmd->stderr (SCALARREF)

=item $cmd->stderr (CODE)

Specify how the standard output or the standard error output is
handled.  If a scalar reference is specified, the output is set to the
scalar value.  If a code reference is specified, the code is invoked
with a chunk as the argument whenever the chunk is available, and with
an C<undef> as the argument when the end of the output is reached.

This method must be invoked before the C<run> method is invoked.  If
this method is not invoked, the standard input is left unchanged
(i.e. same as the standard output or the standard error output of the
main process).

=item $pid = $cmd->pid

Return the process ID of the child process (i.e. the command's
process).

This method can be invoked after the C<run> promise is resolved.  Note
that there can no longer be the process with the ID or can be a
different process with the ID if the command has finished.

=item $boolean = $cmd->running

Return whether the command is running or not.

Note that returning a true value does not mean the command is actually
in active; it might be finished but not C<waitpid>ed by this process
yet.

=item $promise = $cmd->send_signal ($signal)

Send a signal to the command's process, if running.

The argument must be a string or integer representing the signal, such
as C<INT> or C<2>, or zero to not send any signal.  See C<perldoc -f
kill>.

The method returns a L<Promise>, which is resolved with a result
object whose C<killed> method returns the number of processed to which
the signal is sent.  If the command's process is no longer running,
the signal is sent to no process.

=item $value = $cmd->propagate_signal

=item $cmd->propagate_signal ($value)

Get or set whether signals to this (main) process should be propagated
to the child (command) process or not.

The value can be a non-reference value or an array reference of signal
names.  A non-reference value is equivalent to C<['INT', 'QUIT',
'TERM']>.  The value represents the types of the signals to propagate.

This method must be invoked before the C<run> method is invoked.  If
this method is not invoked, no signal is propagated.

=back

=head1 RESULT OBJECT

Promises are resolved with a result object, which has following
methods:

=over 4

=item $boolean = $result->is_success

=item $boolean = $result->is_error

Whether the operation has succeded or in error.  Note that C<<
!!$result->is_success == !!!$result->is_error >> is always true.

=item $string = '' . $result

Return a short message of the result for the developer.

=item $int = $result->exit_code

Return the exit code of the command, if applicable, or C<-1>
otherwise.

=item $int = $result->signal

Return the signal which terminates the command, if applicable.

=item $boolean = $result->core_dump

Return whether there is a core dump or not, if applicable.

=item $int = $result->killed

Return the number of process to which the signal is sent.  Used by
C<send_signal>'s promise.

=item $string = $result->message

Return a short error message for the developer, if available.

=back

=head1 DEPENDENCY

The module requires L<Promise>
<https://github.com/wakaba/perl-promise> and L<AnyEvent::Util>.

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2015 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
